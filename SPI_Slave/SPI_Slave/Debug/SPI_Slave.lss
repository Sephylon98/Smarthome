
SPI_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008f6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000096  00800060  000008f6  0000098a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000036  008000f6  008000f6  00000a20  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a20  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a50  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00000a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001dda  00000000  00000000  00000bf4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000bb7  00000000  00000000  000029ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d84  00000000  00000000  00003585  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000268  00000000  00000000  0000430c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007c6  00000000  00000000  00004574  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f7d  00000000  00000000  00004d3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00005cb7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 ef       	ldi	r30, 0xF6	; 246
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 3f       	cpi	r26, 0xF6	; 246
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	a6 ef       	ldi	r26, 0xF6	; 246
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 32       	cpi	r26, 0x2C	; 44
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 eb 02 	call	0x5d6	; 0x5d6 <main>
  8a:	0c 94 79 04 	jmp	0x8f2	; 0x8f2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <ADC_Init>:

#include "ADC.h"

void ADC_Init()
{
	ADMUX |= ((1<<REFS1)|(1<<REFS0));  //Internal Voltage Reference
  92:	87 b1       	in	r24, 0x07	; 7
  94:	80 6c       	ori	r24, 0xC0	; 192
  96:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= ((1<<ADEN)|(1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2)); //ADC Enable , 128 Pre-Scaler
  98:	86 b1       	in	r24, 0x06	; 6
  9a:	87 68       	ori	r24, 0x87	; 135
  9c:	86 b9       	out	0x06, r24	; 6
  9e:	08 95       	ret

000000a0 <ADC_Read>:
}

Uint16 ADC_Read(Uint8 channelID)
{
	Uint16 data = 0;
	ADMUX = ((ADMUX & 0b11100000)|(channelID & 0b00011111));
  a0:	97 b1       	in	r25, 0x07	; 7
  a2:	90 7e       	andi	r25, 0xE0	; 224
  a4:	8f 71       	andi	r24, 0x1F	; 31
  a6:	89 2b       	or	r24, r25
  a8:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1<<ADSC);
  aa:	86 b1       	in	r24, 0x06	; 6
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	86 b9       	out	0x06, r24	; 6
	while(!(ADCSRA & (1<<ADIF)));
  b0:	34 9b       	sbis	0x06, 4	; 6
  b2:	fe cf       	rjmp	.-4      	; 0xb0 <ADC_Read+0x10>
	data = ADCL;
  b4:	24 b1       	in	r18, 0x04	; 4
	data |= (ADCH<<8);
  b6:	85 b1       	in	r24, 0x05	; 5
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	98 2f       	mov	r25, r24
  bc:	88 27       	eor	r24, r24
	return data;
  be:	82 2b       	or	r24, r18
  c0:	08 95       	ret

000000c2 <DIO_WriteChannel>:
		break;
		case DIO_PortC:
		ToggleBit(PORTC_Reg,ChannelPos);
		break;
		case DIO_PortD:
		ToggleBit(PORTD_Reg,ChannelPos);
  c2:	98 2f       	mov	r25, r24
  c4:	96 95       	lsr	r25
  c6:	96 95       	lsr	r25
  c8:	96 95       	lsr	r25
  ca:	87 70       	andi	r24, 0x07	; 7
  cc:	91 30       	cpi	r25, 0x01	; 1
  ce:	21 f1       	breq	.+72     	; 0x118 <DIO_WriteChannel+0x56>
  d0:	30 f0       	brcs	.+12     	; 0xde <DIO_WriteChannel+0x1c>
  d2:	92 30       	cpi	r25, 0x02	; 2
  d4:	f1 f1       	breq	.+124    	; 0x152 <DIO_WriteChannel+0x90>
  d6:	93 30       	cpi	r25, 0x03	; 3
  d8:	09 f4       	brne	.+2      	; 0xdc <DIO_WriteChannel+0x1a>
  da:	58 c0       	rjmp	.+176    	; 0x18c <DIO_WriteChannel+0xca>
  dc:	08 95       	ret
  de:	61 30       	cpi	r22, 0x01	; 1
  e0:	69 f4       	brne	.+26     	; 0xfc <DIO_WriteChannel+0x3a>
  e2:	4b b3       	in	r20, 0x1b	; 27
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	30 e0       	ldi	r19, 0x00	; 0
  e8:	b9 01       	movw	r22, r18
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_WriteChannel+0x2e>
  ec:	66 0f       	add	r22, r22
  ee:	77 1f       	adc	r23, r23
  f0:	8a 95       	dec	r24
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_WriteChannel+0x2a>
  f4:	cb 01       	movw	r24, r22
  f6:	84 2b       	or	r24, r20
  f8:	8b bb       	out	0x1b, r24	; 27
  fa:	08 95       	ret
  fc:	4b b3       	in	r20, 0x1b	; 27
  fe:	21 e0       	ldi	r18, 0x01	; 1
 100:	30 e0       	ldi	r19, 0x00	; 0
 102:	b9 01       	movw	r22, r18
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_WriteChannel+0x48>
 106:	66 0f       	add	r22, r22
 108:	77 1f       	adc	r23, r23
 10a:	8a 95       	dec	r24
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_WriteChannel+0x44>
 10e:	cb 01       	movw	r24, r22
 110:	80 95       	com	r24
 112:	84 23       	and	r24, r20
 114:	8b bb       	out	0x1b, r24	; 27
 116:	08 95       	ret
 118:	61 30       	cpi	r22, 0x01	; 1
 11a:	69 f4       	brne	.+26     	; 0x136 <DIO_WriteChannel+0x74>
 11c:	48 b3       	in	r20, 0x18	; 24
 11e:	21 e0       	ldi	r18, 0x01	; 1
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	b9 01       	movw	r22, r18
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_WriteChannel+0x68>
 126:	66 0f       	add	r22, r22
 128:	77 1f       	adc	r23, r23
 12a:	8a 95       	dec	r24
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_WriteChannel+0x64>
 12e:	cb 01       	movw	r24, r22
 130:	84 2b       	or	r24, r20
 132:	88 bb       	out	0x18, r24	; 24
 134:	08 95       	ret
 136:	48 b3       	in	r20, 0x18	; 24
 138:	21 e0       	ldi	r18, 0x01	; 1
 13a:	30 e0       	ldi	r19, 0x00	; 0
 13c:	b9 01       	movw	r22, r18
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_WriteChannel+0x82>
 140:	66 0f       	add	r22, r22
 142:	77 1f       	adc	r23, r23
 144:	8a 95       	dec	r24
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_WriteChannel+0x7e>
 148:	cb 01       	movw	r24, r22
 14a:	80 95       	com	r24
 14c:	84 23       	and	r24, r20
 14e:	88 bb       	out	0x18, r24	; 24
 150:	08 95       	ret
 152:	61 30       	cpi	r22, 0x01	; 1
 154:	69 f4       	brne	.+26     	; 0x170 <DIO_WriteChannel+0xae>
 156:	45 b3       	in	r20, 0x15	; 21
 158:	21 e0       	ldi	r18, 0x01	; 1
 15a:	30 e0       	ldi	r19, 0x00	; 0
 15c:	b9 01       	movw	r22, r18
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_WriteChannel+0xa2>
 160:	66 0f       	add	r22, r22
 162:	77 1f       	adc	r23, r23
 164:	8a 95       	dec	r24
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_WriteChannel+0x9e>
 168:	cb 01       	movw	r24, r22
 16a:	84 2b       	or	r24, r20
 16c:	85 bb       	out	0x15, r24	; 21
 16e:	08 95       	ret
 170:	45 b3       	in	r20, 0x15	; 21
 172:	21 e0       	ldi	r18, 0x01	; 1
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	b9 01       	movw	r22, r18
 178:	02 c0       	rjmp	.+4      	; 0x17e <DIO_WriteChannel+0xbc>
 17a:	66 0f       	add	r22, r22
 17c:	77 1f       	adc	r23, r23
 17e:	8a 95       	dec	r24
 180:	e2 f7       	brpl	.-8      	; 0x17a <DIO_WriteChannel+0xb8>
 182:	cb 01       	movw	r24, r22
 184:	80 95       	com	r24
 186:	84 23       	and	r24, r20
 188:	85 bb       	out	0x15, r24	; 21
 18a:	08 95       	ret
 18c:	61 30       	cpi	r22, 0x01	; 1
 18e:	69 f4       	brne	.+26     	; 0x1aa <DIO_WriteChannel+0xe8>
 190:	42 b3       	in	r20, 0x12	; 18
 192:	21 e0       	ldi	r18, 0x01	; 1
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	b9 01       	movw	r22, r18
 198:	02 c0       	rjmp	.+4      	; 0x19e <DIO_WriteChannel+0xdc>
 19a:	66 0f       	add	r22, r22
 19c:	77 1f       	adc	r23, r23
 19e:	8a 95       	dec	r24
 1a0:	e2 f7       	brpl	.-8      	; 0x19a <DIO_WriteChannel+0xd8>
 1a2:	cb 01       	movw	r24, r22
 1a4:	84 2b       	or	r24, r20
 1a6:	82 bb       	out	0x12, r24	; 18
 1a8:	08 95       	ret
 1aa:	42 b3       	in	r20, 0x12	; 18
 1ac:	21 e0       	ldi	r18, 0x01	; 1
 1ae:	30 e0       	ldi	r19, 0x00	; 0
 1b0:	b9 01       	movw	r22, r18
 1b2:	02 c0       	rjmp	.+4      	; 0x1b8 <DIO_WriteChannel+0xf6>
 1b4:	66 0f       	add	r22, r22
 1b6:	77 1f       	adc	r23, r23
 1b8:	8a 95       	dec	r24
 1ba:	e2 f7       	brpl	.-8      	; 0x1b4 <DIO_WriteChannel+0xf2>
 1bc:	cb 01       	movw	r24, r22
 1be:	80 95       	com	r24
 1c0:	84 23       	and	r24, r20
 1c2:	82 bb       	out	0x12, r24	; 18
 1c4:	08 95       	ret

000001c6 <DIO_WritePort>:
		break;
	}
}

void DIO_WritePort(DIO_PortTypes PortId,Uint8 data){
  switch(PortId)
 1c6:	81 30       	cpi	r24, 0x01	; 1
 1c8:	41 f0       	breq	.+16     	; 0x1da <DIO_WritePort+0x14>
 1ca:	28 f0       	brcs	.+10     	; 0x1d6 <DIO_WritePort+0x10>
 1cc:	82 30       	cpi	r24, 0x02	; 2
 1ce:	39 f0       	breq	.+14     	; 0x1de <DIO_WritePort+0x18>
 1d0:	83 30       	cpi	r24, 0x03	; 3
 1d2:	39 f0       	breq	.+14     	; 0x1e2 <DIO_WritePort+0x1c>
 1d4:	08 95       	ret
  {
	  case DIO_PortA:
	  PORTA_Reg = data;
 1d6:	6b bb       	out	0x1b, r22	; 27
	  break;
 1d8:	08 95       	ret
	  case DIO_PortB:
	  PORTB_Reg = data;
 1da:	68 bb       	out	0x18, r22	; 24
	  break;
 1dc:	08 95       	ret
	  case DIO_PortC:
	  PORTC_Reg = data;
 1de:	65 bb       	out	0x15, r22	; 21
	  break;
 1e0:	08 95       	ret
      case DIO_PortD:
      PORTD_Reg = data;
 1e2:	62 bb       	out	0x12, r22	; 18
 1e4:	08 95       	ret

000001e6 <DIO_ReadPort>:
  }
}

Uint8 DIO_ReadPort(DIO_PortTypes PortId){
	Uint8 data = 0xFF;
	switch(PortId){
 1e6:	81 30       	cpi	r24, 0x01	; 1
 1e8:	41 f0       	breq	.+16     	; 0x1fa <DIO_ReadPort+0x14>
 1ea:	28 f0       	brcs	.+10     	; 0x1f6 <DIO_ReadPort+0x10>
 1ec:	82 30       	cpi	r24, 0x02	; 2
 1ee:	39 f0       	breq	.+14     	; 0x1fe <DIO_ReadPort+0x18>
 1f0:	83 30       	cpi	r24, 0x03	; 3
 1f2:	39 f0       	breq	.+14     	; 0x202 <DIO_ReadPort+0x1c>
 1f4:	08 c0       	rjmp	.+16     	; 0x206 <DIO_ReadPort+0x20>
		case DIO_PortA:
		data = PORTA_Reg;
 1f6:	8b b3       	in	r24, 0x1b	; 27
		break;
 1f8:	08 95       	ret
		case DIO_PortB:
		data = PORTB_Reg;
 1fa:	88 b3       	in	r24, 0x18	; 24
		break;
 1fc:	08 95       	ret
		case DIO_PortC:
		data = PORTC_Reg;
 1fe:	85 b3       	in	r24, 0x15	; 21
		break;
 200:	08 95       	ret
		case DIO_PortD:
		data = PORTD_Reg;
 202:	82 b3       	in	r24, 0x12	; 18
		break;
 204:	08 95       	ret
	  break;
  }
}

Uint8 DIO_ReadPort(DIO_PortTypes PortId){
	Uint8 data = 0xFF;
 206:	8f ef       	ldi	r24, 0xFF	; 255
		case DIO_PortD:
		data = PORTD_Reg;
		break;
	}
	return data;
}
 208:	08 95       	ret

0000020a <DIO_Init>:

void DIO_Init(){
	Uint8 count = 0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes ChannelPos;
	for(count=DIO_ChannelA0;count<PINCOUNT;count++){
 20a:	80 e0       	ldi	r24, 0x00	; 0
 20c:	a0 c0       	rjmp	.+320    	; 0x34e <DIO_Init+0x144>
		Portx = count/8;
 20e:	98 2f       	mov	r25, r24
 210:	96 95       	lsr	r25
 212:	96 95       	lsr	r25
 214:	96 95       	lsr	r25
		ChannelPos = count%8;
 216:	28 2f       	mov	r18, r24
 218:	27 70       	andi	r18, 0x07	; 7
		switch(Portx){
 21a:	91 30       	cpi	r25, 0x01	; 1
 21c:	61 f1       	breq	.+88     	; 0x276 <DIO_Init+0x6c>
 21e:	38 f0       	brcs	.+14     	; 0x22e <DIO_Init+0x24>
 220:	92 30       	cpi	r25, 0x02	; 2
 222:	09 f4       	brne	.+2      	; 0x226 <DIO_Init+0x1c>
 224:	4c c0       	rjmp	.+152    	; 0x2be <DIO_Init+0xb4>
 226:	93 30       	cpi	r25, 0x03	; 3
 228:	09 f4       	brne	.+2      	; 0x22c <DIO_Init+0x22>
 22a:	6d c0       	rjmp	.+218    	; 0x306 <DIO_Init+0xfc>
 22c:	8f c0       	rjmp	.+286    	; 0x34c <DIO_Init+0x142>
			case DIO_PortA:
			if(PinCFG[count].ChannelDir == Output){
 22e:	e8 2f       	mov	r30, r24
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	ee 0f       	add	r30, r30
 234:	ff 1f       	adc	r31, r31
 236:	e0 5a       	subi	r30, 0xA0	; 160
 238:	ff 4f       	sbci	r31, 0xFF	; 255
 23a:	90 81       	ld	r25, Z
 23c:	91 30       	cpi	r25, 0x01	; 1
 23e:	69 f4       	brne	.+26     	; 0x25a <DIO_Init+0x50>
				SetBit(DDRA_Reg,ChannelPos);
 240:	9a b3       	in	r25, 0x1a	; 26
 242:	41 e0       	ldi	r20, 0x01	; 1
 244:	50 e0       	ldi	r21, 0x00	; 0
 246:	ba 01       	movw	r22, r20
 248:	02 c0       	rjmp	.+4      	; 0x24e <DIO_Init+0x44>
 24a:	66 0f       	add	r22, r22
 24c:	77 1f       	adc	r23, r23
 24e:	2a 95       	dec	r18
 250:	e2 f7       	brpl	.-8      	; 0x24a <DIO_Init+0x40>
 252:	9b 01       	movw	r18, r22
 254:	29 2b       	or	r18, r25
 256:	2a bb       	out	0x1a, r18	; 26
 258:	79 c0       	rjmp	.+242    	; 0x34c <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRA_Reg,ChannelPos);
 25a:	9a b3       	in	r25, 0x1a	; 26
 25c:	41 e0       	ldi	r20, 0x01	; 1
 25e:	50 e0       	ldi	r21, 0x00	; 0
 260:	ba 01       	movw	r22, r20
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_Init+0x5e>
 264:	66 0f       	add	r22, r22
 266:	77 1f       	adc	r23, r23
 268:	2a 95       	dec	r18
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_Init+0x5a>
 26c:	9b 01       	movw	r18, r22
 26e:	20 95       	com	r18
 270:	29 23       	and	r18, r25
 272:	2a bb       	out	0x1a, r18	; 26
 274:	6b c0       	rjmp	.+214    	; 0x34c <DIO_Init+0x142>
			}
			break;
			case DIO_PortB:
			if(PinCFG[count].ChannelDir == Output){
 276:	e8 2f       	mov	r30, r24
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	ee 0f       	add	r30, r30
 27c:	ff 1f       	adc	r31, r31
 27e:	e0 5a       	subi	r30, 0xA0	; 160
 280:	ff 4f       	sbci	r31, 0xFF	; 255
 282:	90 81       	ld	r25, Z
 284:	91 30       	cpi	r25, 0x01	; 1
 286:	69 f4       	brne	.+26     	; 0x2a2 <DIO_Init+0x98>
				SetBit(DDRB_Reg,ChannelPos);
 288:	97 b3       	in	r25, 0x17	; 23
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	50 e0       	ldi	r21, 0x00	; 0
 28e:	ba 01       	movw	r22, r20
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_Init+0x8c>
 292:	66 0f       	add	r22, r22
 294:	77 1f       	adc	r23, r23
 296:	2a 95       	dec	r18
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_Init+0x88>
 29a:	9b 01       	movw	r18, r22
 29c:	29 2b       	or	r18, r25
 29e:	27 bb       	out	0x17, r18	; 23
 2a0:	55 c0       	rjmp	.+170    	; 0x34c <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRB_Reg,ChannelPos);
 2a2:	97 b3       	in	r25, 0x17	; 23
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	ba 01       	movw	r22, r20
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <DIO_Init+0xa6>
 2ac:	66 0f       	add	r22, r22
 2ae:	77 1f       	adc	r23, r23
 2b0:	2a 95       	dec	r18
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <DIO_Init+0xa2>
 2b4:	9b 01       	movw	r18, r22
 2b6:	20 95       	com	r18
 2b8:	29 23       	and	r18, r25
 2ba:	27 bb       	out	0x17, r18	; 23
 2bc:	47 c0       	rjmp	.+142    	; 0x34c <DIO_Init+0x142>
			}
			break;
			case DIO_PortC:
			if(PinCFG[count].ChannelDir == Output){
 2be:	e8 2f       	mov	r30, r24
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	ee 0f       	add	r30, r30
 2c4:	ff 1f       	adc	r31, r31
 2c6:	e0 5a       	subi	r30, 0xA0	; 160
 2c8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ca:	90 81       	ld	r25, Z
 2cc:	91 30       	cpi	r25, 0x01	; 1
 2ce:	69 f4       	brne	.+26     	; 0x2ea <DIO_Init+0xe0>
				SetBit(DDRC_Reg,ChannelPos);
 2d0:	94 b3       	in	r25, 0x14	; 20
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	50 e0       	ldi	r21, 0x00	; 0
 2d6:	ba 01       	movw	r22, r20
 2d8:	02 c0       	rjmp	.+4      	; 0x2de <DIO_Init+0xd4>
 2da:	66 0f       	add	r22, r22
 2dc:	77 1f       	adc	r23, r23
 2de:	2a 95       	dec	r18
 2e0:	e2 f7       	brpl	.-8      	; 0x2da <DIO_Init+0xd0>
 2e2:	9b 01       	movw	r18, r22
 2e4:	29 2b       	or	r18, r25
 2e6:	24 bb       	out	0x14, r18	; 20
 2e8:	31 c0       	rjmp	.+98     	; 0x34c <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRC_Reg,ChannelPos);
 2ea:	94 b3       	in	r25, 0x14	; 20
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	50 e0       	ldi	r21, 0x00	; 0
 2f0:	ba 01       	movw	r22, r20
 2f2:	02 c0       	rjmp	.+4      	; 0x2f8 <DIO_Init+0xee>
 2f4:	66 0f       	add	r22, r22
 2f6:	77 1f       	adc	r23, r23
 2f8:	2a 95       	dec	r18
 2fa:	e2 f7       	brpl	.-8      	; 0x2f4 <DIO_Init+0xea>
 2fc:	9b 01       	movw	r18, r22
 2fe:	20 95       	com	r18
 300:	29 23       	and	r18, r25
 302:	24 bb       	out	0x14, r18	; 20
 304:	23 c0       	rjmp	.+70     	; 0x34c <DIO_Init+0x142>
			}
			break;
			case DIO_PortD:
			if(PinCFG[count].ChannelDir == Output){
 306:	e8 2f       	mov	r30, r24
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	ee 0f       	add	r30, r30
 30c:	ff 1f       	adc	r31, r31
 30e:	e0 5a       	subi	r30, 0xA0	; 160
 310:	ff 4f       	sbci	r31, 0xFF	; 255
 312:	90 81       	ld	r25, Z
 314:	91 30       	cpi	r25, 0x01	; 1
 316:	69 f4       	brne	.+26     	; 0x332 <DIO_Init+0x128>
				SetBit(DDRD_Reg,ChannelPos);
 318:	91 b3       	in	r25, 0x11	; 17
 31a:	41 e0       	ldi	r20, 0x01	; 1
 31c:	50 e0       	ldi	r21, 0x00	; 0
 31e:	ba 01       	movw	r22, r20
 320:	02 c0       	rjmp	.+4      	; 0x326 <DIO_Init+0x11c>
 322:	66 0f       	add	r22, r22
 324:	77 1f       	adc	r23, r23
 326:	2a 95       	dec	r18
 328:	e2 f7       	brpl	.-8      	; 0x322 <DIO_Init+0x118>
 32a:	9b 01       	movw	r18, r22
 32c:	29 2b       	or	r18, r25
 32e:	21 bb       	out	0x11, r18	; 17
 330:	0d c0       	rjmp	.+26     	; 0x34c <DIO_Init+0x142>
			}
			else
			{
				ClearBit(DDRD_Reg,ChannelPos);
 332:	91 b3       	in	r25, 0x11	; 17
 334:	41 e0       	ldi	r20, 0x01	; 1
 336:	50 e0       	ldi	r21, 0x00	; 0
 338:	ba 01       	movw	r22, r20
 33a:	02 c0       	rjmp	.+4      	; 0x340 <DIO_Init+0x136>
 33c:	66 0f       	add	r22, r22
 33e:	77 1f       	adc	r23, r23
 340:	2a 95       	dec	r18
 342:	e2 f7       	brpl	.-8      	; 0x33c <DIO_Init+0x132>
 344:	9b 01       	movw	r18, r22
 346:	20 95       	com	r18
 348:	29 23       	and	r18, r25
 34a:	21 bb       	out	0x11, r18	; 17

void DIO_Init(){
	Uint8 count = 0;
	DIO_PortTypes Portx;
	DIO_ChannelTypes ChannelPos;
	for(count=DIO_ChannelA0;count<PINCOUNT;count++){
 34c:	8f 5f       	subi	r24, 0xFF	; 255
 34e:	80 32       	cpi	r24, 0x20	; 32
 350:	08 f4       	brcc	.+2      	; 0x354 <DIO_Init+0x14a>
 352:	5d cf       	rjmp	.-326    	; 0x20e <DIO_Init+0x4>
				ClearBit(DDRD_Reg,ChannelPos);
			}
			break;	
		}
	}
 354:	08 95       	ret

00000356 <LCD_Cmd>:
    LCD_Cmd(0x40 + (loc*8));
	for(i; i<8; i++) 
	{
		LCD_Char(msg[i]);
	} 
}
 356:	cf 93       	push	r28
 358:	c8 2f       	mov	r28, r24
 35a:	80 e0       	ldi	r24, 0x00	; 0
 35c:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_ReadPort>
 360:	8f 70       	andi	r24, 0x0F	; 15
 362:	9c 2f       	mov	r25, r28
 364:	90 7f       	andi	r25, 0xF0	; 240
 366:	68 2f       	mov	r22, r24
 368:	69 2b       	or	r22, r25
 36a:	80 e0       	ldi	r24, 0x00	; 0
 36c:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_WritePort>
 370:	60 e0       	ldi	r22, 0x00	; 0
 372:	89 e0       	ldi	r24, 0x09	; 9
 374:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_WriteChannel>
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	8b e0       	ldi	r24, 0x0B	; 11
 37c:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_WriteChannel>
 380:	8f e8       	ldi	r24, 0x8F	; 143
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	f1 f7       	brne	.-4      	; 0x384 <LCD_Cmd+0x2e>
 388:	00 c0       	rjmp	.+0      	; 0x38a <LCD_Cmd+0x34>
 38a:	00 00       	nop
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	8b e0       	ldi	r24, 0x0B	; 11
 390:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_WriteChannel>
 394:	8f e1       	ldi	r24, 0x1F	; 31
 396:	9e e4       	ldi	r25, 0x4E	; 78
 398:	01 97       	sbiw	r24, 0x01	; 1
 39a:	f1 f7       	brne	.-4      	; 0x398 <LCD_Cmd+0x42>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <LCD_Cmd+0x48>
 39e:	00 00       	nop
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_ReadPort>
 3a6:	90 e1       	ldi	r25, 0x10	; 16
 3a8:	c9 9f       	mul	r28, r25
 3aa:	90 01       	movw	r18, r0
 3ac:	11 24       	eor	r1, r1
 3ae:	8f 70       	andi	r24, 0x0F	; 15
 3b0:	68 2f       	mov	r22, r24
 3b2:	62 2b       	or	r22, r18
 3b4:	80 e0       	ldi	r24, 0x00	; 0
 3b6:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_WritePort>
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	89 e0       	ldi	r24, 0x09	; 9
 3be:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_WriteChannel>
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	8b e0       	ldi	r24, 0x0B	; 11
 3c6:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_WriteChannel>
 3ca:	8f e8       	ldi	r24, 0x8F	; 143
 3cc:	91 e0       	ldi	r25, 0x01	; 1
 3ce:	01 97       	sbiw	r24, 0x01	; 1
 3d0:	f1 f7       	brne	.-4      	; 0x3ce <LCD_Cmd+0x78>
 3d2:	00 c0       	rjmp	.+0      	; 0x3d4 <LCD_Cmd+0x7e>
 3d4:	00 00       	nop
 3d6:	61 e0       	ldi	r22, 0x01	; 1
 3d8:	8b e0       	ldi	r24, 0x0B	; 11
 3da:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_WriteChannel>
 3de:	8f e3       	ldi	r24, 0x3F	; 63
 3e0:	9f e1       	ldi	r25, 0x1F	; 31
 3e2:	01 97       	sbiw	r24, 0x01	; 1
 3e4:	f1 f7       	brne	.-4      	; 0x3e2 <LCD_Cmd+0x8c>
 3e6:	00 c0       	rjmp	.+0      	; 0x3e8 <LCD_Cmd+0x92>
 3e8:	00 00       	nop
 3ea:	cf 91       	pop	r28
 3ec:	08 95       	ret

000003ee <LCD_Init>:
 3ee:	60 e0       	ldi	r22, 0x00	; 0
 3f0:	8a e0       	ldi	r24, 0x0A	; 10
 3f2:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_WriteChannel>
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	8b e0       	ldi	r24, 0x0B	; 11
 3fa:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_WriteChannel>
 3fe:	2f ef       	ldi	r18, 0xFF	; 255
 400:	89 ef       	ldi	r24, 0xF9	; 249
 402:	90 e0       	ldi	r25, 0x00	; 0
 404:	21 50       	subi	r18, 0x01	; 1
 406:	80 40       	sbci	r24, 0x00	; 0
 408:	90 40       	sbci	r25, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40e:	00 00       	nop
 410:	83 e3       	ldi	r24, 0x33	; 51
 412:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_Cmd>
 416:	8f e8       	ldi	r24, 0x8F	; 143
 418:	91 e0       	ldi	r25, 0x01	; 1
 41a:	01 97       	sbiw	r24, 0x01	; 1
 41c:	f1 f7       	brne	.-4      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41e:	00 c0       	rjmp	.+0      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 420:	00 00       	nop
 422:	82 e3       	ldi	r24, 0x32	; 50
 424:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_Cmd>
 428:	88 e2       	ldi	r24, 0x28	; 40
 42a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_Cmd>
 42e:	86 e0       	ldi	r24, 0x06	; 6
 430:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_Cmd>
 434:	8c e0       	ldi	r24, 0x0C	; 12
 436:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_Cmd>
 43a:	81 e0       	ldi	r24, 0x01	; 1
 43c:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_Cmd>
 440:	8f e3       	ldi	r24, 0x3F	; 63
 442:	9f e1       	ldi	r25, 0x1F	; 31
 444:	01 97       	sbiw	r24, 0x01	; 1
 446:	f1 f7       	brne	.-4      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 448:	00 c0       	rjmp	.+0      	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 44a:	00 00       	nop
 44c:	08 95       	ret

0000044e <LCD_Char>:
 44e:	cf 93       	push	r28
 450:	c8 2f       	mov	r28, r24
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_ReadPort>
 458:	8f 70       	andi	r24, 0x0F	; 15
 45a:	9c 2f       	mov	r25, r28
 45c:	90 7f       	andi	r25, 0xF0	; 240
 45e:	68 2f       	mov	r22, r24
 460:	69 2b       	or	r22, r25
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_WritePort>
 468:	61 e0       	ldi	r22, 0x01	; 1
 46a:	89 e0       	ldi	r24, 0x09	; 9
 46c:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_WriteChannel>
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	8b e0       	ldi	r24, 0x0B	; 11
 474:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_WriteChannel>
 478:	8f e8       	ldi	r24, 0x8F	; 143
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	01 97       	sbiw	r24, 0x01	; 1
 47e:	f1 f7       	brne	.-4      	; 0x47c <LCD_Char+0x2e>
 480:	00 c0       	rjmp	.+0      	; 0x482 <LCD_Char+0x34>
 482:	00 00       	nop
 484:	61 e0       	ldi	r22, 0x01	; 1
 486:	8b e0       	ldi	r24, 0x0B	; 11
 488:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_WriteChannel>
 48c:	8f e1       	ldi	r24, 0x1F	; 31
 48e:	9e e4       	ldi	r25, 0x4E	; 78
 490:	01 97       	sbiw	r24, 0x01	; 1
 492:	f1 f7       	brne	.-4      	; 0x490 <LCD_Char+0x42>
 494:	00 c0       	rjmp	.+0      	; 0x496 <LCD_Char+0x48>
 496:	00 00       	nop
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	0e 94 f3 00 	call	0x1e6	; 0x1e6 <DIO_ReadPort>
 49e:	90 e1       	ldi	r25, 0x10	; 16
 4a0:	c9 9f       	mul	r28, r25
 4a2:	90 01       	movw	r18, r0
 4a4:	11 24       	eor	r1, r1
 4a6:	8f 70       	andi	r24, 0x0F	; 15
 4a8:	68 2f       	mov	r22, r24
 4aa:	62 2b       	or	r22, r18
 4ac:	80 e0       	ldi	r24, 0x00	; 0
 4ae:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <DIO_WritePort>
 4b2:	61 e0       	ldi	r22, 0x01	; 1
 4b4:	89 e0       	ldi	r24, 0x09	; 9
 4b6:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_WriteChannel>
 4ba:	60 e0       	ldi	r22, 0x00	; 0
 4bc:	8b e0       	ldi	r24, 0x0B	; 11
 4be:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_WriteChannel>
 4c2:	8f e8       	ldi	r24, 0x8F	; 143
 4c4:	91 e0       	ldi	r25, 0x01	; 1
 4c6:	01 97       	sbiw	r24, 0x01	; 1
 4c8:	f1 f7       	brne	.-4      	; 0x4c6 <LCD_Char+0x78>
 4ca:	00 c0       	rjmp	.+0      	; 0x4cc <LCD_Char+0x7e>
 4cc:	00 00       	nop
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	8b e0       	ldi	r24, 0x0B	; 11
 4d2:	0e 94 61 00 	call	0xc2	; 0xc2 <DIO_WriteChannel>
 4d6:	8f e3       	ldi	r24, 0x3F	; 63
 4d8:	9f e1       	ldi	r25, 0x1F	; 31
 4da:	01 97       	sbiw	r24, 0x01	; 1
 4dc:	f1 f7       	brne	.-4      	; 0x4da <LCD_Char+0x8c>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <LCD_Char+0x92>
 4e0:	00 00       	nop
 4e2:	cf 91       	pop	r28
 4e4:	08 95       	ret

000004e6 <LCD_String>:
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	1f 92       	push	r1
 4f0:	cd b7       	in	r28, 0x3d	; 61
 4f2:	de b7       	in	r29, 0x3e	; 62
 4f4:	8c 01       	movw	r16, r24
 4f6:	19 82       	std	Y+1, r1	; 0x01
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
 4fa:	0a c0       	rjmp	.+20     	; 0x510 <LCD_String+0x2a>
 4fc:	89 81       	ldd	r24, Y+1	; 0x01
 4fe:	f8 01       	movw	r30, r16
 500:	e8 0f       	add	r30, r24
 502:	f1 1d       	adc	r31, r1
 504:	80 81       	ld	r24, Z
 506:	0e 94 27 02 	call	0x44e	; 0x44e <LCD_Char>
 50a:	89 81       	ldd	r24, Y+1	; 0x01
 50c:	8f 5f       	subi	r24, 0xFF	; 255
 50e:	89 83       	std	Y+1, r24	; 0x01
 510:	89 81       	ldd	r24, Y+1	; 0x01
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	f8 01       	movw	r30, r16
 516:	01 90       	ld	r0, Z+
 518:	00 20       	and	r0, r0
 51a:	e9 f7       	brne	.-6      	; 0x516 <LCD_String+0x30>
 51c:	31 97       	sbiw	r30, 0x01	; 1
 51e:	e0 1b       	sub	r30, r16
 520:	f1 0b       	sbc	r31, r17
 522:	8e 17       	cp	r24, r30
 524:	9f 07       	cpc	r25, r31
 526:	50 f3       	brcs	.-44     	; 0x4fc <LCD_String+0x16>
 528:	0f 90       	pop	r0
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	1f 91       	pop	r17
 530:	0f 91       	pop	r16
 532:	08 95       	ret

00000534 <LCD_StringPos>:

void LCD_StringPos(Sint8 * string , Uint8 line , Uint8 pos)
{
 534:	cf 93       	push	r28
 536:	df 93       	push	r29
 538:	ec 01       	movw	r28, r24
	switch(line){
 53a:	61 30       	cpi	r22, 0x01	; 1
 53c:	19 f0       	breq	.+6      	; 0x544 <LCD_StringPos+0x10>
 53e:	62 30       	cpi	r22, 0x02	; 2
 540:	51 f0       	breq	.+20     	; 0x556 <LCD_StringPos+0x22>
 542:	11 c0       	rjmp	.+34     	; 0x566 <LCD_StringPos+0x32>
		case 1:
		       LCD_Cmd(0x80 | (pos & 0x0F));
 544:	84 2f       	mov	r24, r20
 546:	8f 70       	andi	r24, 0x0F	; 15
 548:	80 68       	ori	r24, 0x80	; 128
 54a:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_Cmd>
			   LCD_String(string);
 54e:	ce 01       	movw	r24, r28
 550:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_String>
		break;
 554:	08 c0       	rjmp	.+16     	; 0x566 <LCD_StringPos+0x32>
		case 2:
		       LCD_Cmd(0xC0 | (pos & 0x0F));
 556:	84 2f       	mov	r24, r20
 558:	8f 70       	andi	r24, 0x0F	; 15
 55a:	80 6c       	ori	r24, 0xC0	; 192
 55c:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_Cmd>
		       LCD_String(string);
 560:	ce 01       	movw	r24, r28
 562:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_String>
		break;
	}
}
 566:	df 91       	pop	r29
 568:	cf 91       	pop	r28
 56a:	08 95       	ret

0000056c <LCD_CharPos>:

void LCD_CharPos(Uint8 data , Uint8 line , Uint8 pos)
{
 56c:	cf 93       	push	r28
 56e:	c8 2f       	mov	r28, r24
	switch(line){
 570:	61 30       	cpi	r22, 0x01	; 1
 572:	19 f0       	breq	.+6      	; 0x57a <LCD_CharPos+0xe>
 574:	62 30       	cpi	r22, 0x02	; 2
 576:	51 f0       	breq	.+20     	; 0x58c <LCD_CharPos+0x20>
 578:	11 c0       	rjmp	.+34     	; 0x59c <LCD_CharPos+0x30>
		case 1:
		LCD_Cmd(0x80 | (pos & 0x0F));
 57a:	84 2f       	mov	r24, r20
 57c:	8f 70       	andi	r24, 0x0F	; 15
 57e:	80 68       	ori	r24, 0x80	; 128
 580:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_Cmd>
		LCD_Char(data);
 584:	8c 2f       	mov	r24, r28
 586:	0e 94 27 02 	call	0x44e	; 0x44e <LCD_Char>
		break;
 58a:	08 c0       	rjmp	.+16     	; 0x59c <LCD_CharPos+0x30>
		case 2:
		LCD_Cmd(0xC0 | (pos & 0x0F));
 58c:	84 2f       	mov	r24, r20
 58e:	8f 70       	andi	r24, 0x0F	; 15
 590:	80 6c       	ori	r24, 0xC0	; 192
 592:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_Cmd>
		LCD_Char(data);
 596:	8c 2f       	mov	r24, r28
 598:	0e 94 27 02 	call	0x44e	; 0x44e <LCD_Char>
		break;
	}
 59c:	cf 91       	pop	r28
 59e:	08 95       	ret

000005a0 <PrintADC>:
		}
	}
}
void PrintADC(void)
{
	temp = ADC_Read(1);
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	0e 94 50 00 	call	0xa0	; 0xa0 <ADC_Read>
	temp /= 4;
 5a6:	96 95       	lsr	r25
 5a8:	87 95       	ror	r24
 5aa:	96 95       	lsr	r25
 5ac:	87 95       	ror	r24
 5ae:	90 93 f7 00 	sts	0x00F7, r25	; 0x8000f7 <__data_end+0x1>
 5b2:	80 93 f6 00 	sts	0x00F6, r24	; 0x8000f6 <__data_end>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 5b6:	4a e0       	ldi	r20, 0x0A	; 10
 5b8:	6a ef       	ldi	r22, 0xFA	; 250
 5ba:	70 e0       	ldi	r23, 0x00	; 0
 5bc:	0e 94 44 04 	call	0x888	; 0x888 <__itoa_ncheck>
	itoa(temp,buffer,10);
	LCD_StringPos("Temperature: ",2,0);
 5c0:	40 e0       	ldi	r20, 0x00	; 0
 5c2:	62 e0       	ldi	r22, 0x02	; 2
 5c4:	80 ea       	ldi	r24, 0xA0	; 160
 5c6:	90 e0       	ldi	r25, 0x00	; 0
 5c8:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_StringPos>
	LCD_String(buffer);
 5cc:	8a ef       	ldi	r24, 0xFA	; 250
 5ce:	90 e0       	ldi	r25, 0x00	; 0
 5d0:	0e 94 73 02 	call	0x4e6	; 0x4e6 <LCD_String>
 5d4:	08 95       	ret

000005d6 <main>:
	/* Enable Global Interrupt */
	//sei();
	/* *********************** */
	
	/* Initialization */
	DIO_Init();
 5d6:	0e 94 05 01 	call	0x20a	; 0x20a <DIO_Init>
	LCD_Init();
 5da:	0e 94 f7 01 	call	0x3ee	; 0x3ee <LCD_Init>
	ADC_Init();
 5de:	0e 94 49 00 	call	0x92	; 0x92 <ADC_Init>
	Timer_Init();
 5e2:	0e 94 ba 03 	call	0x774	; 0x774 <Timer_Init>
	/* *************** */
	
	//unsigned char buffer0 = 0;
	
	LCD_StringPos("Slave Device",1,0);
 5e6:	40 e0       	ldi	r20, 0x00	; 0
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	8e ea       	ldi	r24, 0xAE	; 174
 5ec:	90 e0       	ldi	r25, 0x00	; 0
 5ee:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_StringPos>
	LCD_StringPos("Rx Data: ",2,0);
 5f2:	40 e0       	ldi	r20, 0x00	; 0
 5f4:	62 e0       	ldi	r22, 0x02	; 2
 5f6:	8b eb       	ldi	r24, 0xBB	; 187
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_StringPos>
	
	DDRC |= (1<<0)|(1<<1)|(1<<2);
 5fe:	84 b3       	in	r24, 0x14	; 20
 600:	87 60       	ori	r24, 0x07	; 7
 602:	84 bb       	out	0x14, r24	; 20
	/* Enable Slave */
	SPI_Init(Slave);
 604:	80 e0       	ldi	r24, 0x00	; 0
 606:	0e 94 13 04 	call	0x826	; 0x826 <SPI_Init>
	
	while (1)
	{
		switch(SPI_Receive())
 60a:	0e 94 31 04 	call	0x862	; 0x862 <SPI_Receive>
 60e:	81 33       	cpi	r24, 0x31	; 49
 610:	81 f1       	breq	.+96     	; 0x672 <main+0x9c>
 612:	82 33       	cpi	r24, 0x32	; 50
 614:	09 f4       	brne	.+2      	; 0x618 <main+0x42>
 616:	6f c0       	rjmp	.+222    	; 0x6f6 <main+0x120>
 618:	80 33       	cpi	r24, 0x30	; 48
 61a:	b9 f7       	brne	.-18     	; 0x60a <main+0x34>
		{
			case '0':
			LCD_Cmd(CLR);
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_Cmd>
			/* Print CMD on LCD */
			LCD_StringPos("Slave Device",1,0);
 622:	40 e0       	ldi	r20, 0x00	; 0
 624:	61 e0       	ldi	r22, 0x01	; 1
 626:	8e ea       	ldi	r24, 0xAE	; 174
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_StringPos>
			LCD_StringPos("Rx Data: ",2,0);
 62e:	40 e0       	ldi	r20, 0x00	; 0
 630:	62 e0       	ldi	r22, 0x02	; 2
 632:	8b eb       	ldi	r24, 0xBB	; 187
 634:	90 e0       	ldi	r25, 0x00	; 0
 636:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_StringPos>
			LCD_CharPos('0',2,13);
 63a:	4d e0       	ldi	r20, 0x0D	; 13
 63c:	62 e0       	ldi	r22, 0x02	; 2
 63e:	80 e3       	ldi	r24, 0x30	; 48
 640:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_CharPos>
			LCD_Cmd(CLR);
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_Cmd>
			/* **************** */
			/* ADC */
			LCD_StringPos("Rx Data: ",1,0);
 64a:	40 e0       	ldi	r20, 0x00	; 0
 64c:	61 e0       	ldi	r22, 0x01	; 1
 64e:	8b eb       	ldi	r24, 0xBB	; 187
 650:	90 e0       	ldi	r25, 0x00	; 0
 652:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_StringPos>
			LCD_CharPos('0',1,13);
 656:	4d e0       	ldi	r20, 0x0D	; 13
 658:	61 e0       	ldi	r22, 0x01	; 1
 65a:	80 e3       	ldi	r24, 0x30	; 48
 65c:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_CharPos>
			PORTC |= (1<<2);
 660:	85 b3       	in	r24, 0x15	; 21
 662:	84 60       	ori	r24, 0x04	; 4
 664:	85 bb       	out	0x15, r24	; 21
			PrintADC();
 666:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <PrintADC>
			PORTC &= ~(1<<2);
 66a:	85 b3       	in	r24, 0x15	; 21
 66c:	8b 7f       	andi	r24, 0xFB	; 251
 66e:	85 bb       	out	0x15, r24	; 21
			/* ADC */
			break;
 670:	cc cf       	rjmp	.-104    	; 0x60a <main+0x34>
			
			case '1':
			LCD_Cmd(CLR);
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_Cmd>
			switch(door_flag) //if door is closed
 678:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <door_flag>
 67c:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <door_flag+0x1>
 680:	00 97       	sbiw	r24, 0x00	; 0
 682:	19 f0       	breq	.+6      	; 0x68a <main+0xb4>
 684:	01 97       	sbiw	r24, 0x01	; 1
 686:	39 f1       	breq	.+78     	; 0x6d6 <main+0x100>
 688:	c0 cf       	rjmp	.-128    	; 0x60a <main+0x34>
			{
				case 0:
				PORTC |= (1<<0);
 68a:	85 b3       	in	r24, 0x15	; 21
 68c:	81 60       	ori	r24, 0x01	; 1
 68e:	85 bb       	out	0x15, r24	; 21
				Door_Open();
 690:	0e 94 dd 03 	call	0x7ba	; 0x7ba <Door_Open>
				door_flag ++;
 694:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <door_flag>
 698:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <door_flag+0x1>
 69c:	01 96       	adiw	r24, 0x01	; 1
 69e:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <door_flag+0x1>
 6a2:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <door_flag>
				LCD_Cmd(CLR);
 6a6:	81 e0       	ldi	r24, 0x01	; 1
 6a8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_Cmd>
				LCD_StringPos("Door Open",1,0);
 6ac:	40 e0       	ldi	r20, 0x00	; 0
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	85 ec       	ldi	r24, 0xC5	; 197
 6b2:	90 e0       	ldi	r25, 0x00	; 0
 6b4:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_StringPos>
				LCD_StringPos("Rx Data: ",2,0);
 6b8:	40 e0       	ldi	r20, 0x00	; 0
 6ba:	62 e0       	ldi	r22, 0x02	; 2
 6bc:	8b eb       	ldi	r24, 0xBB	; 187
 6be:	90 e0       	ldi	r25, 0x00	; 0
 6c0:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_StringPos>
				LCD_CharPos('1',2,13);
 6c4:	4d e0       	ldi	r20, 0x0D	; 13
 6c6:	62 e0       	ldi	r22, 0x02	; 2
 6c8:	81 e3       	ldi	r24, 0x31	; 49
 6ca:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_CharPos>
				PORTC &= ~(1<<0);
 6ce:	85 b3       	in	r24, 0x15	; 21
 6d0:	8e 7f       	andi	r24, 0xFE	; 254
 6d2:	85 bb       	out	0x15, r24	; 21
				break;
 6d4:	9a cf       	rjmp	.-204    	; 0x60a <main+0x34>
				
				case 1:
				PORTC |= (1<<0);
 6d6:	85 b3       	in	r24, 0x15	; 21
 6d8:	81 60       	ori	r24, 0x01	; 1
 6da:	85 bb       	out	0x15, r24	; 21
				LCD_Cmd(CLR);
 6dc:	81 e0       	ldi	r24, 0x01	; 1
 6de:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_Cmd>
				LCD_StringPos("Already Open",1,0);
 6e2:	40 e0       	ldi	r20, 0x00	; 0
 6e4:	61 e0       	ldi	r22, 0x01	; 1
 6e6:	8f ec       	ldi	r24, 0xCF	; 207
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_StringPos>
				PORTC &= ~(1<<0);
 6ee:	85 b3       	in	r24, 0x15	; 21
 6f0:	8e 7f       	andi	r24, 0xFE	; 254
 6f2:	85 bb       	out	0x15, r24	; 21
				break;
 6f4:	8a cf       	rjmp	.-236    	; 0x60a <main+0x34>
			}
			break;
			
			case '2':
			LCD_Cmd(CLR);
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_Cmd>
			switch(door_flag) // if door is opened
 6fc:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <door_flag>
 700:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <door_flag+0x1>
 704:	00 97       	sbiw	r24, 0x00	; 0
 706:	31 f1       	breq	.+76     	; 0x754 <main+0x17e>
 708:	01 97       	sbiw	r24, 0x01	; 1
 70a:	09 f0       	breq	.+2      	; 0x70e <main+0x138>
 70c:	7e cf       	rjmp	.-260    	; 0x60a <main+0x34>
			{
				case 1:
				PORTC |= (1<<1);
 70e:	85 b3       	in	r24, 0x15	; 21
 710:	82 60       	ori	r24, 0x02	; 2
 712:	85 bb       	out	0x15, r24	; 21
				Door_Close();
 714:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <Door_Close>
				door_flag --;
 718:	80 91 f8 00 	lds	r24, 0x00F8	; 0x8000f8 <door_flag>
 71c:	90 91 f9 00 	lds	r25, 0x00F9	; 0x8000f9 <door_flag+0x1>
 720:	01 97       	sbiw	r24, 0x01	; 1
 722:	90 93 f9 00 	sts	0x00F9, r25	; 0x8000f9 <door_flag+0x1>
 726:	80 93 f8 00 	sts	0x00F8, r24	; 0x8000f8 <door_flag>
				LCD_StringPos("Door Close",1,0);
 72a:	40 e0       	ldi	r20, 0x00	; 0
 72c:	61 e0       	ldi	r22, 0x01	; 1
 72e:	8c ed       	ldi	r24, 0xDC	; 220
 730:	90 e0       	ldi	r25, 0x00	; 0
 732:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_StringPos>
				LCD_StringPos("Rx Data: ",2,0);
 736:	40 e0       	ldi	r20, 0x00	; 0
 738:	62 e0       	ldi	r22, 0x02	; 2
 73a:	8b eb       	ldi	r24, 0xBB	; 187
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_StringPos>
				LCD_CharPos('2',2,13);
 742:	4d e0       	ldi	r20, 0x0D	; 13
 744:	62 e0       	ldi	r22, 0x02	; 2
 746:	82 e3       	ldi	r24, 0x32	; 50
 748:	0e 94 b6 02 	call	0x56c	; 0x56c <LCD_CharPos>
				PORTC &= ~(1<<1);
 74c:	85 b3       	in	r24, 0x15	; 21
 74e:	8d 7f       	andi	r24, 0xFD	; 253
 750:	85 bb       	out	0x15, r24	; 21
				break;
 752:	5b cf       	rjmp	.-330    	; 0x60a <main+0x34>
				
				case 0:
				PORTC |= (1<<1);
 754:	85 b3       	in	r24, 0x15	; 21
 756:	82 60       	ori	r24, 0x02	; 2
 758:	85 bb       	out	0x15, r24	; 21
				LCD_Cmd(CLR);
 75a:	81 e0       	ldi	r24, 0x01	; 1
 75c:	0e 94 ab 01 	call	0x356	; 0x356 <LCD_Cmd>
				LCD_StringPos("Already Closed",1,0);
 760:	40 e0       	ldi	r20, 0x00	; 0
 762:	61 e0       	ldi	r22, 0x01	; 1
 764:	87 ee       	ldi	r24, 0xE7	; 231
 766:	90 e0       	ldi	r25, 0x00	; 0
 768:	0e 94 9a 02 	call	0x534	; 0x534 <LCD_StringPos>
				PORTC &= ~(1<<1);
 76c:	85 b3       	in	r24, 0x15	; 21
 76e:	8d 7f       	andi	r24, 0xFD	; 253
 770:	85 bb       	out	0x15, r24	; 21
				break;
 772:	4b cf       	rjmp	.-362    	; 0x60a <main+0x34>

00000774 <Timer_Init>:
#define F_CPU 16000000UL
#include "Servo.h"

void Timer_Init(void)
{
	DDRD |= (1<<5);
 774:	81 b3       	in	r24, 0x11	; 17
 776:	80 62       	ori	r24, 0x20	; 32
 778:	81 bb       	out	0x11, r24	; 17
	TCCR1A |= ((1<<WGM11)|(1<<COM1A1)); // Non Inverting Mode
 77a:	8f b5       	in	r24, 0x2f	; 47
 77c:	82 68       	ori	r24, 0x82	; 130
 77e:	8f bd       	out	0x2f, r24	; 47
	TCCR1B |= ((1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11)); // N=64 - FPWM ;
 780:	8e b5       	in	r24, 0x2e	; 46
 782:	8b 61       	ori	r24, 0x1B	; 27
 784:	8e bd       	out	0x2e, r24	; 46
	ICR1 = 4999;
 786:	87 e8       	ldi	r24, 0x87	; 135
 788:	93 e1       	ldi	r25, 0x13	; 19
 78a:	97 bd       	out	0x27, r25	; 39
 78c:	86 bd       	out	0x26, r24	; 38
 78e:	08 95       	ret

00000790 <Servo>:
	_delay_ms(500);
}

void Servo(short Angle)
{
	OCR1A = (((((unsigned short)Angle-MiniAngle)*(MaxCount-MiniCount))/(MaxAngle-MiniAngle))+MiniCount -1);
 790:	4a ef       	ldi	r20, 0xFA	; 250
 792:	48 9f       	mul	r20, r24
 794:	90 01       	movw	r18, r0
 796:	49 9f       	mul	r20, r25
 798:	30 0d       	add	r19, r0
 79a:	11 24       	eor	r1, r1
 79c:	a3 e8       	ldi	r26, 0x83	; 131
 79e:	bd e2       	ldi	r27, 0x2D	; 45
 7a0:	0e 94 35 04 	call	0x86a	; 0x86a <__umulhisi3>
 7a4:	92 95       	swap	r25
 7a6:	82 95       	swap	r24
 7a8:	8f 70       	andi	r24, 0x0F	; 15
 7aa:	89 27       	eor	r24, r25
 7ac:	9f 70       	andi	r25, 0x0F	; 15
 7ae:	89 27       	eor	r24, r25
 7b0:	87 50       	subi	r24, 0x07	; 7
 7b2:	9f 4f       	sbci	r25, 0xFF	; 255
 7b4:	9b bd       	out	0x2b, r25	; 43
 7b6:	8a bd       	out	0x2a, r24	; 42
 7b8:	08 95       	ret

000007ba <Door_Open>:
	TCCR1B |= ((1<<WGM12)|(1<<WGM13)|(1<<CS10)|(1<<CS11)); // N=64 - FPWM ;
	ICR1 = 4999;
}
void Door_Open(void)
{
	Servo(0);
 7ba:	80 e0       	ldi	r24, 0x00	; 0
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	0e 94 c8 03 	call	0x790	; 0x790 <Servo>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 7c2:	2f ef       	ldi	r18, 0xFF	; 255
 7c4:	89 e6       	ldi	r24, 0x69	; 105
 7c6:	98 e1       	ldi	r25, 0x18	; 24
 7c8:	21 50       	subi	r18, 0x01	; 1
 7ca:	80 40       	sbci	r24, 0x00	; 0
 7cc:	90 40       	sbci	r25, 0x00	; 0
 7ce:	e1 f7       	brne	.-8      	; 0x7c8 <Door_Open+0xe>
 7d0:	00 c0       	rjmp	.+0      	; 0x7d2 <Door_Open+0x18>
 7d2:	00 00       	nop
	_delay_ms(500);
	Servo(90);
 7d4:	8a e5       	ldi	r24, 0x5A	; 90
 7d6:	90 e0       	ldi	r25, 0x00	; 0
 7d8:	0e 94 c8 03 	call	0x790	; 0x790 <Servo>
 7dc:	2f ef       	ldi	r18, 0xFF	; 255
 7de:	89 e6       	ldi	r24, 0x69	; 105
 7e0:	98 e1       	ldi	r25, 0x18	; 24
 7e2:	21 50       	subi	r18, 0x01	; 1
 7e4:	80 40       	sbci	r24, 0x00	; 0
 7e6:	90 40       	sbci	r25, 0x00	; 0
 7e8:	e1 f7       	brne	.-8      	; 0x7e2 <Door_Open+0x28>
 7ea:	00 c0       	rjmp	.+0      	; 0x7ec <Door_Open+0x32>
 7ec:	00 00       	nop
 7ee:	08 95       	ret

000007f0 <Door_Close>:
	_delay_ms(500);
}

void Door_Close(void)
{
	Servo(90);
 7f0:	8a e5       	ldi	r24, 0x5A	; 90
 7f2:	90 e0       	ldi	r25, 0x00	; 0
 7f4:	0e 94 c8 03 	call	0x790	; 0x790 <Servo>
 7f8:	2f ef       	ldi	r18, 0xFF	; 255
 7fa:	89 e6       	ldi	r24, 0x69	; 105
 7fc:	98 e1       	ldi	r25, 0x18	; 24
 7fe:	21 50       	subi	r18, 0x01	; 1
 800:	80 40       	sbci	r24, 0x00	; 0
 802:	90 40       	sbci	r25, 0x00	; 0
 804:	e1 f7       	brne	.-8      	; 0x7fe <Door_Close+0xe>
 806:	00 c0       	rjmp	.+0      	; 0x808 <__DATA_REGION_LENGTH__+0x8>
 808:	00 00       	nop
	_delay_ms(500);
	Servo(0);
 80a:	80 e0       	ldi	r24, 0x00	; 0
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	0e 94 c8 03 	call	0x790	; 0x790 <Servo>
 812:	2f ef       	ldi	r18, 0xFF	; 255
 814:	89 e6       	ldi	r24, 0x69	; 105
 816:	98 e1       	ldi	r25, 0x18	; 24
 818:	21 50       	subi	r18, 0x01	; 1
 81a:	80 40       	sbci	r24, 0x00	; 0
 81c:	90 40       	sbci	r25, 0x00	; 0
 81e:	e1 f7       	brne	.-8      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
 820:	00 c0       	rjmp	.+0      	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 822:	00 00       	nop
 824:	08 95       	ret

00000826 <SPI_Init>:
unsigned char SPI_Transeiver(unsigned char data)		/* SPI Transmit & Receive data function */
{
	SPDR = data;
	while(!(SPSR & (1<<SPIF)));	/* Wait till reception complete */
	return(SPDR);			/* Return received data */
}
 826:	88 23       	and	r24, r24
 828:	79 f0       	breq	.+30     	; 0x848 <SPI_Init+0x22>
 82a:	81 30       	cpi	r24, 0x01	; 1
 82c:	c9 f4       	brne	.+50     	; 0x860 <__stack+0x1>
 82e:	88 b3       	in	r24, 0x18	; 24
 830:	80 61       	ori	r24, 0x10	; 16
 832:	88 bb       	out	0x18, r24	; 24
 834:	87 b3       	in	r24, 0x17	; 23
 836:	80 6b       	ori	r24, 0xB0	; 176
 838:	87 bb       	out	0x17, r24	; 23
 83a:	87 b3       	in	r24, 0x17	; 23
 83c:	8f 7b       	andi	r24, 0xBF	; 191
 83e:	87 bb       	out	0x17, r24	; 23
 840:	8d b1       	in	r24, 0x0d	; 13
 842:	80 65       	ori	r24, 0x50	; 80
 844:	8d b9       	out	0x0d, r24	; 13
 846:	08 95       	ret
 848:	87 b3       	in	r24, 0x17	; 23
 84a:	8f 7d       	andi	r24, 0xDF	; 223
 84c:	87 bb       	out	0x17, r24	; 23
 84e:	87 b3       	in	r24, 0x17	; 23
 850:	80 64       	ori	r24, 0x40	; 64
 852:	87 bb       	out	0x17, r24	; 23
 854:	88 b3       	in	r24, 0x18	; 24
 856:	80 61       	ori	r24, 0x10	; 16
 858:	88 bb       	out	0x18, r24	; 24
 85a:	8d b1       	in	r24, 0x0d	; 13
 85c:	80 64       	ori	r24, 0x40	; 64
 85e:	8d b9       	out	0x0d, r24	; 13
 860:	08 95       	ret

00000862 <SPI_Receive>:

unsigned char SPI_Receive(void)			/* SPI Receive data function */
{
	while(!(SPSR & (1<<SPIF)));	/* Wait till reception complete */
 862:	77 9b       	sbis	0x0e, 7	; 14
 864:	fe cf       	rjmp	.-4      	; 0x862 <SPI_Receive>
	return(SPDR);			/* Return received data */
 866:	8f b1       	in	r24, 0x0f	; 15
}
 868:	08 95       	ret

0000086a <__umulhisi3>:
 86a:	a2 9f       	mul	r26, r18
 86c:	b0 01       	movw	r22, r0
 86e:	b3 9f       	mul	r27, r19
 870:	c0 01       	movw	r24, r0
 872:	a3 9f       	mul	r26, r19
 874:	70 0d       	add	r23, r0
 876:	81 1d       	adc	r24, r1
 878:	11 24       	eor	r1, r1
 87a:	91 1d       	adc	r25, r1
 87c:	b2 9f       	mul	r27, r18
 87e:	70 0d       	add	r23, r0
 880:	81 1d       	adc	r24, r1
 882:	11 24       	eor	r1, r1
 884:	91 1d       	adc	r25, r1
 886:	08 95       	ret

00000888 <__itoa_ncheck>:
 888:	bb 27       	eor	r27, r27
 88a:	4a 30       	cpi	r20, 0x0A	; 10
 88c:	31 f4       	brne	.+12     	; 0x89a <__itoa_ncheck+0x12>
 88e:	99 23       	and	r25, r25
 890:	22 f4       	brpl	.+8      	; 0x89a <__itoa_ncheck+0x12>
 892:	bd e2       	ldi	r27, 0x2D	; 45
 894:	90 95       	com	r25
 896:	81 95       	neg	r24
 898:	9f 4f       	sbci	r25, 0xFF	; 255
 89a:	0c 94 50 04 	jmp	0x8a0	; 0x8a0 <__utoa_common>

0000089e <__utoa_ncheck>:
 89e:	bb 27       	eor	r27, r27

000008a0 <__utoa_common>:
 8a0:	fb 01       	movw	r30, r22
 8a2:	55 27       	eor	r21, r21
 8a4:	aa 27       	eor	r26, r26
 8a6:	88 0f       	add	r24, r24
 8a8:	99 1f       	adc	r25, r25
 8aa:	aa 1f       	adc	r26, r26
 8ac:	a4 17       	cp	r26, r20
 8ae:	10 f0       	brcs	.+4      	; 0x8b4 <__utoa_common+0x14>
 8b0:	a4 1b       	sub	r26, r20
 8b2:	83 95       	inc	r24
 8b4:	50 51       	subi	r21, 0x10	; 16
 8b6:	b9 f7       	brne	.-18     	; 0x8a6 <__utoa_common+0x6>
 8b8:	a0 5d       	subi	r26, 0xD0	; 208
 8ba:	aa 33       	cpi	r26, 0x3A	; 58
 8bc:	08 f0       	brcs	.+2      	; 0x8c0 <__utoa_common+0x20>
 8be:	a9 5d       	subi	r26, 0xD9	; 217
 8c0:	a1 93       	st	Z+, r26
 8c2:	00 97       	sbiw	r24, 0x00	; 0
 8c4:	79 f7       	brne	.-34     	; 0x8a4 <__utoa_common+0x4>
 8c6:	b1 11       	cpse	r27, r1
 8c8:	b1 93       	st	Z+, r27
 8ca:	11 92       	st	Z+, r1
 8cc:	cb 01       	movw	r24, r22
 8ce:	0c 94 69 04 	jmp	0x8d2	; 0x8d2 <strrev>

000008d2 <strrev>:
 8d2:	dc 01       	movw	r26, r24
 8d4:	fc 01       	movw	r30, r24
 8d6:	67 2f       	mov	r22, r23
 8d8:	71 91       	ld	r23, Z+
 8da:	77 23       	and	r23, r23
 8dc:	e1 f7       	brne	.-8      	; 0x8d6 <strrev+0x4>
 8de:	32 97       	sbiw	r30, 0x02	; 2
 8e0:	04 c0       	rjmp	.+8      	; 0x8ea <strrev+0x18>
 8e2:	7c 91       	ld	r23, X
 8e4:	6d 93       	st	X+, r22
 8e6:	70 83       	st	Z, r23
 8e8:	62 91       	ld	r22, -Z
 8ea:	ae 17       	cp	r26, r30
 8ec:	bf 07       	cpc	r27, r31
 8ee:	c8 f3       	brcs	.-14     	; 0x8e2 <strrev+0x10>
 8f0:	08 95       	ret

000008f2 <_exit>:
 8f2:	f8 94       	cli

000008f4 <__stop_program>:
 8f4:	ff cf       	rjmp	.-2      	; 0x8f4 <__stop_program>
